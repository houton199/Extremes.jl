var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions-1","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/#","page":"Functions","title":"Functions","text":"Modules = [Extremes]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"functions/#Extremes.getcluster","page":"Functions","title":"Extremes.getcluster","text":"getcluster(y::Array{<:Real,1}, u₁::Real , u₂::Real=0)::DataFrame\n\nReturns a DataFrame with clusters for exceedance models. A cluster is defined as a sequence where values are higher than u₂ with at least a value higher than threshold u₁.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Extremes.getcluster","page":"Functions","title":"Extremes.getcluster","text":"getcluster(df::DataFrame, u₁::Real, u₂::Real=0.0)::DataFrame\n\nReturns a DataFrame with clusters for exceedance models. A cluster is defined as a sequence where values are higher than u₂ with at least a value higher than threshold u₁.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Extremes.gevfit-Tuple{Array{#s16,1} where #s16<:Real,Array{#s15,1} where #s15<:Real}","page":"Functions","title":"Extremes.gevfit","text":"gevfit(y::Vector{<:Real}, initialvalues::Vector{<:Real};\n    locationcov::Vector{<:DataItem} = Vector{Variable}(),\n    logscalecov::Vector{<:DataItem} = Vector{Variable}(),\n    shapecov::Vector{<:DataItem} = Vector{Variable}(),)::MaximumLikelihoodEVA\n\nFit the Generalized Extreme Value (GEV) distribution by maximum likelihood to the vector of data y using the intial values initialvalues.\n\nThe covariate may be standardized to facilitate the estimation.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gevfit-Tuple{Array{#s19,1} where #s19<:Real}","page":"Functions","title":"Extremes.gevfit","text":"gevfit(y::Vector{<:Real};\n    locationcov::Vector{Vector{T}} where T<:Real = Vector{Vector{Float64}}(),\n    logscalecov::Vector{Vector{T}} where T<:Real = Vector{Vector{Float64}}(),\n    shapecov::Vector{Vector{T}} where T<:Real = Vector{Vector{Float64}}())\n\nFit the Generalized Extreme Value (GEV) distribution by maximum likelihood to the vector of data y.\n\nThe optional parameter locationcov is a vector containing the covariates for the parameter μ. The optional parameter logscalecov is a vector containing the covariates for the parameter σ. The optional parameter shapecov is a vector containing the covariates for the parameter ξ.\n\nExample with a non-stationary location parameter:\n\nusing Extremes, Distributions\n\n# Sample size\nn = 300\n\n# Covariate\nx = collect(1:n)\n\n# Location as function of the covariate\nμ = x*1/100\n\n# Sample from the non-stationary GEV distribution\npd = GeneralizedExtremeValue.(μ,1,.1)\ny = rand.(pd)\n\n# Estimate the parameters\ngevfit(y, locationcov = [Variable(\"x\", x)])\n\nThe covariate may be standardized to facilitate the estimation.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gevfit-Tuple{BlockMaxima,Array{#s46,1} where #s46<:Real}","page":"Functions","title":"Extremes.gevfit","text":"gevfit(model::BlockMaxima)\n\nFit the Generalized Extreme Value (GEV) distribution by maximum likelihood of the BlockMaxima model model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gevfit-Tuple{DataFrame,Symbol,Array{#s43,1} where #s43<:Real}","page":"Functions","title":"Extremes.gevfit","text":"gevfit(df::DataFrame, datacol::Symbol, initialvalues::Vector{<:Real};\n    locationcovid::Vector{Symbol}=Symbol[],\n    logscalecovid::Vector{Symbol}=Symbol[],\n    shapecovid::Vector{Symbol}=Symbol[])::MaximumLikelihoodEVA\n\nFit the Generalized Extreme Value (GEV) distribution by maximum likelihood to the vector of data contained in the dataframe df at the column datacol using the initial values ìnitialvalues.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gevfit-Tuple{DataFrame,Symbol}","page":"Functions","title":"Extremes.gevfit","text":"gevfit(df::DataFrame, datacol::Symbol;\n    locationcovid::Vector{Symbol}=Symbol[],\n    logscalecovid::Vector{Symbol}=Symbol[],\n    shapecovid::Vector{Symbol}=Symbol[])::MaximumLikelihoodEVA\n\nFit the Generalized Extreme Value (GEV) distribution by maximum likelihood to the vector of data contained in the dataframe df at the column datacol.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gevfitbayes-Tuple{Array{#s19,1} where #s19<:Real}","page":"Functions","title":"Extremes.gevfitbayes","text":"gevfitbayes(y::Vector{<:Real};\n    locationcov::Vector{Vector{T}} where T<:Real = Vector{Vector{Float64}}(),\n    logscalecov::Vector{Vector{T}} where T<:Real = Vector{Vector{Float64}}(),\n    shapecov::Vector{Vector{T}} where T<:Real = Vector{Vector{Float64}}(),\n    niter::Int=5000, warmup::Int=2000)\n\nFit the Generalized Extreme Value (GEV) distribution under the Bayesian paradigm to the vector of data y.\n\nThe optional parameter locationcov is a vector containing the covariates for the parameter μ. The optional parameter logscalecov is a vector containing the covariates for the parameter σ. The optional parameter shapecov is a vector containing the covariates for the parameter ξ.\n\nThe covariate may be standardized to facilitate the estimation.\n\nA random sample of the posterior distribution is generated using the NUTS algortihm.\n\nOnly flat prior is now supported.\n\nExample with a non-stationary location parameter:\n\n# Sample size\nn = 300\n\n# Covariate\nx = collect(1:n)\n\n# Location as function of the covariate\nμ = x*1/100\n\n# Sample from the non-stationary GEV distribution\npd = GeneralizedExtremeValue.(μ,1,.1)\ny = rand.(pd)\n\n# Estimate the parameters\ngevfitbayes(y, locationcov = [Variable(\"x\", x)])\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gevfitbayes-Tuple{BlockMaxima}","page":"Functions","title":"Extremes.gevfitbayes","text":"gevfitbayes(model::BlockMaxima; niter::Int=5000, warmup::Int=2000)\n\nFit a non-stationary Generalized Extreme Value (GEV) distribution under the Bayesian paradigm of the BlockMaxima model model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gevfitbayes-Tuple{DataFrame,Symbol}","page":"Functions","title":"Extremes.gevfitbayes","text":"gevfitbayes(df::DataFrame, datacol::Symbol;\n    locationcovid::Vector{Symbol}=Symbol[],\n    logscalecovid::Vector{Symbol}=Symbol[],\n    shapecovid::Vector{Symbol}=Symbol[],\n    niter::Int=5000, warmup::Int=2000)::MaximumLikelihoodEVA\n\nFit a Generalized Extreme Value (GEV) distribution under the Bayesian paradigm to the vector of data contained in the dataframe df at the column datacol.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gevfitpwm-Tuple{Array{#s46,1} where #s46<:Real}","page":"Functions","title":"Extremes.gevfitpwm","text":"gevfitpwm(y::Vector{<:Real})::pwmEVA\n\nEstimate the Generalized Extreme value distribution parameters with the probability weighted moments as described in Hosking et al. (1985).\n\nReference: Hosking, J. R. M., Wallis, J. R. and Wood, E. F. (1985). Estimation of the generalized extreme-value     distribution by the method of probability-weighted moments. Technometrics, 27, 251-261.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gevfitpwm-Tuple{BlockMaxima{Distributions.GeneralizedExtremeValue}}","page":"Functions","title":"Extremes.gevfitpwm","text":"gevfitpwm(model::BlockMaxima)::pwmEVA\n\nEstimate the Generalized Extreme value distribution parameters with the probability weighted moments as described in Hosking et al. (1985).\n\nWith the methods of moments, it is not possible to include covariates in the model. If covariates are provided, they are ignored and the stationary model is fitted.\n\nReference: Hosking, J. R. M., Wallis, J. R. and Wood, E. F. (1985). Estimation of the generalized extreme-value     distribution by the method of probability-weighted moments. Technometrics, 27, 251-261.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gpfit-Tuple{Array{#s19,1} where #s19<:Real,Array{#s18,1} where #s18<:Real}","page":"Functions","title":"Extremes.gpfit","text":"gpfit(y::Vector{<:Real}, initialvalues::Vector{<:Real};\n    logscalecov::Vector{<:DataItem} = Vector{Variable}(),\n    shapecov::Vector{<:DataItem} = Vector{Variable}())::MaximumLikelihoodEVA\n\nFit the Generalized Pareto (GP) distribution by maximum likelihood to the vector of data y using the initial values initialvalues.\n\nThe optional parameter logscalecov is a vector containing the covariates for the parameter σ. The optional parameter shapecov is a vector containing the covariates for the parameter ξ.\n\nThe covariate may be standardized to facilitate the estimation.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gpfit-Tuple{Array{#s23,1} where #s23<:Real}","page":"Functions","title":"Extremes.gpfit","text":"gpfit(y::Vector{<:Real};\n    logscalecov::Vector{<:DataItem} = Vector{Variable}(),\n    shapecov::Vector{<:DataItem} = Vector{Variable}())::MaximumLikelihoodEVA\n\nFit the Generalized Pareto (GP) distribution by maximum likelihood to the vector of data y.\n\nThe optional parameter logscalecov is a vector containing the covariates for the parameter σ. The optional parameter shapecov is a vector containing the covariates for the parameter ξ.\n\nExample with a non-stationary location parameter:\n\n# Sample size\nn = 300\n\n# Covariate\nx = collect(1:n)\n\n# Location as function of the covariate\nϕ = x*1/500\nσ = exp.(ϕ)\n\n# Sample from the non-stationary GEV distribution\npd = GeneralizedPareto.(σ,.1)\ny = rand.(pd)\n\n# Estimate the parameters\ngpfit(y, logscalecov = [Variable(\"x\", x)])\n\nThe covariate may be standardized to facilitate the estimation.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gpfit-Tuple{DataFrame,Symbol,Array{#s43,1} where #s43<:Real}","page":"Functions","title":"Extremes.gpfit","text":"gpfit(df::DataFrame, datacol::Symbol, initialvalues::Vector{<:Real};\n    logscalecovid::Vector{Symbol}=Symbol[],\n    shapecovid::Vector{Symbol}=Symbol[])::MaximumLikelihoodEVA\n\nFit a Generalized Pareto (GP) distribution by maximum likelihood to the vector of data contained in the dataframe df at the column datacol using the initial values initialvalues.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gpfit-Tuple{DataFrame,Symbol}","page":"Functions","title":"Extremes.gpfit","text":"gpfit(df::DataFrame, datacol::Symbol;\n    logscalecovid::Vector{Symbol}=Symbol[],\n    shapecovid::Vector{Symbol}=Symbol[])::MaximumLikelihoodEVA\n\nFit a Generalized Pareto (GP) distribution by maximum likelihood to the vector of data contained in the dataframe df at the column datacol.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gpfit-Tuple{ThresholdExceedance,Array{#s46,1} where #s46<:Real}","page":"Functions","title":"Extremes.gpfit","text":"gpfit(model::ThresholdExceedance)::MaximumLikelihoodEVA\n\nFit the Generalized Pareto (GP) distribution by maximum likelihood to the ThresholdExceedance model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gpfitbayes-Tuple{Array{#s23,1} where #s23<:Real}","page":"Functions","title":"Extremes.gpfitbayes","text":"gpfitbayes(y::Vector{<:Real};\n     logscalecov::Vector{<:DataItem} = Vector{Variable}(),\n     shapecov::Vector{<:DataItem} = Vector{Variable}(),\n     niter::Int=5000, warmup::Int=2000)::BayesianEVA\n\nFit a non-stationary Generalized Pareto (GEV) distribution under the Bayesian paradigm to the vector of data contained in the Vector y.\n\nThe optional parameter logscalecov is a vector containing the covariates for the parameter σ. The optional parameter shapecov is a vector containing the covariates for the parameter ξ.\n\nThe covariate may be standardized to facilitate the estimation.\n\nA random sample of the posterior distribution is generated using the NUTS algortihm.\n\nOnly flat prior is now supported.\n\nExample with a non-stationary location parameter:\n\n# Sample size\nn = 300\n\n# Covariate\nx = collect(1:n)\n\n# Location as function of the covariate\nϕ = x*1/500\nσ = exp.(ϕ)\n\n# Sample from the non-stationary GEV distribution\npd = GeneralizedPareto.(σ,.1)\ny = rand.(pd)\n\n# Estimate the parameters\ngpfitbayes(y, logscalecov = [Variable(\"x\", x)])\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gpfitbayes-Tuple{DataFrame,Symbol}","page":"Functions","title":"Extremes.gpfitbayes","text":"gpfitbayes(df::DataFrame, datacol::Symbol;\n    logscalecovid::Vector{Symbol}=Symbol[],\n    shapecovid::Vector{Symbol}=Symbol[],\n    niter::Int=5000, warmup::Int=2000)::MaximumLikelihoodEVA\n\nFit a Generalized Pareto (GP) distribution under the Bayesian paradigm to the vector of data contained in the dataframe df at the column datacol.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gpfitbayes-Tuple{ThresholdExceedance}","page":"Functions","title":"Extremes.gpfitbayes","text":"gpfitbayes(model::ThresholdExceedance, niter::Int=5000, warmup::Int=2000)::BayesianEVA\n\nFit the Generalized Pareto (GP) distribution under the Bayesian paradigm to the ThresholdExceedance model.\n\nA random sample from the posterior distribution is generated using the NUTS algortihm.\n\nOnly flat prior is now supported.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gpfitpwm-Tuple{Array{#s46,1} where #s46<:Real}","page":"Functions","title":"Extremes.gpfitpwm","text":"gpfitpwm(y::Vector{<:Real})::pwmEVA\n\nEstimate the Generalized Pareto distribution parameters with the probability weighted moments as described in Hosking & Wallis (1987).\n\nReference: Hosking, J. R. M. and Wallis, J. R. (1987). Parameter and Quantile Estimation for the Generalized Pareto Distribution,     Technometrics, 29(3), 339-349.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.gpfitpwm-Tuple{ThresholdExceedance}","page":"Functions","title":"Extremes.gpfitpwm","text":"gpfitpwm(model::ThresholdExceedance)::pwmEVA\n\nEstimate the Generalized Pareto distribution parameters with the probability weighted moments as described in Hosking & Wallis (1987).\n\nReference: Hosking, J. R. M. and Wallis, J. R. (1987). Parameter and Quantile Estimation for the Generalized Pareto Distribution,     Technometrics, 29(3), 339-349.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.load-Tuple{String}","page":"Functions","title":"Extremes.load","text":"load(name::String)::DataFrame\n\nReturns the data associated with the name.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.returnlevel","page":"Functions","title":"Extremes.returnlevel","text":"returnlevel(fm::BayesianEVA{BlockMaxima}, returnPeriod::Real, confidencelevel::Real=.95)::ReturnLevel\n\nCompute the return level of the return period returnPeriod from the fitted model fm.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Extremes.returnlevel","page":"Functions","title":"Extremes.returnlevel","text":"returnlevel(fm::BayesianEVA{ThresholdExceedance}, threshold::Vector{<:Real}, nobservation::Int,\n    nobsperblock::Int, returnPeriod::Real, confidencelevel::Real=.95)::ReturnLevel\n\nCompute the return level of the return period returnPeriod from the fitted model fm.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Extremes.returnlevel","page":"Functions","title":"Extremes.returnlevel","text":"returnlevel(fm::MaximumLikelihoodEVA{BlockMaxima}, returnPeriod::Real, confidencelevel::Real=.95)::ReturnLevel\n\nCompute the return level of the return period returnPeriod from the fitted model fm.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Extremes.returnlevel","page":"Functions","title":"Extremes.returnlevel","text":"returnlevel(fm::MaximumLikelihoodEVA{ThresholdExceedance}, threshold::Vector{<:Real}, nobservation::Int,\n    nobsperblock::Int, returnPeriod::Real, confidencelevel::Real=.95)::ReturnLevel\n\nCompute the return level of the return period returnPeriod from the fitted model fm.\n\nThe threshold should be a scalar. A varying threshold is not yet implemented.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Types-1","page":"Functions","title":"Types","text":"","category":"section"},{"location":"functions/#","page":"Functions","title":"Functions","text":"Modules = [Extremes]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"functions/#Extremes.BlockMaxima-Tuple{Array{#s43,1} where #s43<:Real}","page":"Functions","title":"Extremes.BlockMaxima","text":"BlockMaxima(data::Vector{<:Real};\n    locationcov::Vector{Variable} = Vector{Variable}(),\n    logscalecov::Vector{Variable} = Vector{Variable}(),\n    shapecov::Vector{Variable} = Vector{Variable}())::BlockMaxima\n\nCreates a BlockMaxima structure.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.BlockMaxima-Union{Tuple{Array{#s19,1} where #s19<:Real}, Tuple{T}} where T<:Distributions.Distribution","page":"Functions","title":"Extremes.BlockMaxima","text":"BlockMaxima{T}(data::Vector{<:Real};\n    locationcov::Vector{Variable} = Vector{Variable}(),\n    logscalecov::Vector{Variable} = Vector{Variable}(),\n    shapecov::Vector{Variable} = Vector{Variable}())::BlockMaxima where T<:Distribution\n\nCreates a BlockMaxima structure.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.ThresholdExceedance-Tuple{Array{#s23,1} where #s23<:Real}","page":"Functions","title":"Extremes.ThresholdExceedance","text":"ThresholdExceedance(exceedances::Vector{<:Real};\n    logscalecov::Vector{<:DataItem} = Vector{Variable}(),\n    shapecov::Vector{<:DataItem} = Vector{Variable}())::ThresholdExceedance\n\nCreates a ThresholdExceedance structure.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Extremes.VariableStd-Tuple{String,Array{#s21,1} where #s21<:Real}","page":"Functions","title":"Extremes.VariableStd","text":"VariableStd(name::String, z::Vector{<:Real})::VariableStd\n\nConstruct a VariableStd type from the standardized vector z with the name name.\n\n\n\n\n\n","category":"method"},{"location":"getting_started/#Getting-Started-1","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"contributing/#Contributing-1","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Contributions are welcomed. Here's the workflow for development of new features, refactoring and bugfix.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"master             # Stable branch, always ready to be tagged\ndev (or develop)   # Development branch. New features, refactoring, bug and hotfix are integrated into dev before going into master.\nfeature/           # New feature needs a `feature` prefix\n   struct-eva      # Example of a new feature named `struct-eva`   \nrefactor/          # Refactoring are tagged with a `refactor` prefix\n   struct-eva      # Example of refactoring the `struct-eva` feature\nbug/               # Prefix for bugs found during development\n   data-fix        # Example where we fix a dataset\nhotfix/            # Prefix for hotfix (bugs for deployed versions)\n   example-fix     # Example of a bugfix","category":"page"},{"location":"#Extremes-for-Julia-documentation-1","page":"Extremes for Julia documentation","title":"Extremes for Julia documentation","text":"","category":"section"},{"location":"#High-level-API-1","page":"Extremes for Julia documentation","title":"High level API","text":"","category":"section"},{"location":"#","page":"Extremes for Julia documentation","title":"Extremes for Julia documentation","text":"getcluster(y::Array{<:Real,1}, u₁::Real , u₂::Real=0.0)\ngetcluster(df::DataFrame, u₁::Real, u₂::Real=0.0)\ngevfitbayes(y::Array{<:Real}; warmup::Int=0, niter::Int=1000, thin::Int=1, stepSize::Array{<:Real,1}=[.1,.1,.05])\ngevfit(y::Array{T,1} where T<:Real)\ngevfit(y::Array{Float64,1}, location_covariate::Array{Float64,1}; initialvalues::Array{Float64,1}=Float64[])\ngpdfit(y::Array{T} where T<:Real; threshold::Real=0.0)\ngpdfitbayes(data::Array{Float64,1}; threshold::Real=0, niter::Int = 10000, warmup::Int = 5000,  thin::Int = 1, stepSize::Array{<:Real,1}=[.1,.1])","category":"page"},{"location":"#Extremes.getcluster","page":"Extremes for Julia documentation","title":"Extremes.getcluster","text":"getcluster(y::Array{<:Real,1}, u₁::Real , u₂::Real=0)::DataFrame\n\nReturns a DataFrame with clusters for exceedance models. A cluster is defined as a sequence where values are higher than u₂ with at least a value higher than threshold u₁.\n\n\n\n\n\n","category":"function"},{"location":"#Extremes.gevfit-Tuple{Array{T,1} where T<:Real}","page":"Extremes for Julia documentation","title":"Extremes.gevfit","text":"gevfit(y::Vector{<:Real};\n    locationcov::Vector{Vector{T}} where T<:Real = Vector{Vector{Float64}}(),\n    logscalecov::Vector{Vector{T}} where T<:Real = Vector{Vector{Float64}}(),\n    shapecov::Vector{Vector{T}} where T<:Real = Vector{Vector{Float64}}())\n\nFit the Generalized Extreme Value (GEV) distribution by maximum likelihood to the vector of data y.\n\nThe optional parameter locationcov is a vector containing the covariates for the parameter μ. The optional parameter logscalecov is a vector containing the covariates for the parameter σ. The optional parameter shapecov is a vector containing the covariates for the parameter ξ.\n\nExample with a non-stationary location parameter:\n\nusing Extremes, Distributions\n\n# Sample size\nn = 300\n\n# Covariate\nx = collect(1:n)\n\n# Location as function of the covariate\nμ = x*1/100\n\n# Sample from the non-stationary GEV distribution\npd = GeneralizedExtremeValue.(μ,1,.1)\ny = rand.(pd)\n\n# Estimate the parameters\ngevfit(y, locationcov = [Variable(\"x\", x)])\n\nThe covariate may be standardized to facilitate the estimation.\n\n\n\n\n\n","category":"method"},{"location":"#Extremes.gevfit-Tuple{Array{Float64,1},Array{Float64,1}}","page":"Extremes for Julia documentation","title":"Extremes.gevfit","text":"gevfit(y::Vector{<:Real}, initialvalues::Vector{<:Real};\n    locationcov::Vector{<:DataItem} = Vector{Variable}(),\n    logscalecov::Vector{<:DataItem} = Vector{Variable}(),\n    shapecov::Vector{<:DataItem} = Vector{Variable}(),)::MaximumLikelihoodEVA\n\nFit the Generalized Extreme Value (GEV) distribution by maximum likelihood to the vector of data y using the intial values initialvalues.\n\nThe covariate may be standardized to facilitate the estimation.\n\n\n\n\n\n","category":"method"},{"location":"#Low-level-API-1","page":"Extremes for Julia documentation","title":"Low level API","text":"","category":"section"},{"location":"#","page":"Extremes for Julia documentation","title":"Extremes for Julia documentation","text":"Extremes.gumbelfitpwmom(x::Array{T,1} where T<:Real)\nExtremes.gevfitlmom(x::Array{T,1} where T<:Real)\nExtremes.getinitialvalues(y::Array{T,1} where T<:Real)\nExtremes.gevhessian(y::Array{N,1} where N<:Real,μ::Real,σ::Real,ξ::Real)\nExtremes.gpdfitmom(y::Array{T} where T<:Real; threshold::Real=0.0)","category":"page"}]
}
